{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marce\\\\OneDrive\\\\Documentos\\\\Objetos Inteligentes\\\\projetoiot\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport mqtt from 'mqtt';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [sensorData, setSensorData] = useState(null);\n  useEffect(() => {\n    // Conectar ao broker MQTT usando TCP\n    const client = mqtt.connect('mqtt://192.168.0.100:1883'); // Certifique-se de que a URL do broker esteja correta\n\n    // Evento de conexão bem-sucedida\n    client.on('connect', () => {\n      console.log('Conectado ao MQTT Broker');\n      client.subscribe('esp32/sensordata', err => {\n        if (err) {\n          console.log('Erro ao se inscrever no tópico:', err);\n        } else {\n          console.log('Inscrito no tópico \"esp32/sensordata\"');\n        }\n      });\n    });\n\n    // Evento de recebimento de mensagens\n    client.on('message', (topic, message) => {\n      console.log('Mensagem recebida:', topic, message.toString());\n\n      // Atualiza os dados recebidos no estado\n      try {\n        const data = JSON.parse(message.toString());\n        setSensorData(data);\n      } catch (err) {\n        console.error('Erro ao parsear a mensagem:', err);\n      }\n    });\n\n    // Evento de desconexão\n    client.on('close', () => {\n      console.log('Desconectado do broker MQTT');\n    });\n\n    // Retornar uma função de limpeza quando o componente for desmontado\n    return () => {\n      client.end();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Conex\\xE3o MQTT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: sensorData ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Dados do Sensor:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temperatura: \", sensorData.temperature, \" \\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Umidade: \", sensorData.humidity, \" %\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Aguardando dados do sensor...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"b5axGbR/lRweVIVqXNxgJ0XLyYk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","mqtt","jsxDEV","_jsxDEV","App","_s","sensorData","setSensorData","client","connect","on","console","log","subscribe","err","topic","message","toString","data","JSON","parse","error","end","children","fileName","_jsxFileName","lineNumber","columnNumber","temperature","humidity","_c","$RefreshReg$"],"sources":["C:/Users/marce/OneDrive/Documentos/Objetos Inteligentes/projetoiot/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport mqtt from 'mqtt';\nimport './App.css';\n\nconst App = () => {\n  const [sensorData, setSensorData] = useState(null);\n\n  useEffect(() => {\n    // Conectar ao broker MQTT usando TCP\n    const client = mqtt.connect('mqtt://192.168.0.100:1883'); // Certifique-se de que a URL do broker esteja correta\n\n    // Evento de conexão bem-sucedida\n    client.on('connect', () => {\n      console.log('Conectado ao MQTT Broker');\n      client.subscribe('esp32/sensordata', (err) => {\n        if (err) {\n          console.log('Erro ao se inscrever no tópico:', err);\n        } else {\n          console.log('Inscrito no tópico \"esp32/sensordata\"');\n        }\n      });\n    });\n\n    // Evento de recebimento de mensagens\n    client.on('message', (topic, message) => {\n      console.log('Mensagem recebida:', topic, message.toString());\n\n      // Atualiza os dados recebidos no estado\n      try {\n        const data = JSON.parse(message.toString());\n        setSensorData(data);\n      } catch (err) {\n        console.error('Erro ao parsear a mensagem:', err);\n      }\n    });\n\n    // Evento de desconexão\n    client.on('close', () => {\n      console.log('Desconectado do broker MQTT');\n    });\n\n    // Retornar uma função de limpeza quando o componente for desmontado\n    return () => {\n      client.end();\n    };\n  }, []);\n\n  return (\n    <div>\n      <h1>Conexão MQTT</h1>\n      <div>\n        {sensorData ? (\n          <div>\n            <h2>Dados do Sensor:</h2>\n            <p>Temperatura: {sensorData.temperature} °C</p>\n            <p>Umidade: {sensorData.humidity} %</p>\n          </div>\n        ) : (\n          <p>Aguardando dados do sensor...</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}