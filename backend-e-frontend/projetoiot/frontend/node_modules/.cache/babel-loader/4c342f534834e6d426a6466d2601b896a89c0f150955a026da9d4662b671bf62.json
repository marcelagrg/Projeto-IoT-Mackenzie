{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marce\\\\OneDrive\\\\Documentos\\\\Objetos Inteligentes\\\\projetoiot\\\\frontend\\\\src\\\\components\\\\SensorData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport mqtt from 'mqtt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SensorData() {\n  _s();\n  const [sensorData, setSensorData] = useState([]); // Array para armazenar as leituras\n\n  // Função para buscar dados do backend\n  const fetchSensorData = async () => {\n    try {\n      const response = await fetch('/api/sensordata');\n      const data = await response.json();\n      setSensorData(data);\n    } catch (error) {\n      console.error('Erro ao buscar dados do sensor:', error);\n    }\n  };\n  useEffect(() => {\n    // Conectar ao broker MQTT\n    const client = mqtt.connect('ws://192.168.0.100:9001'); // Usando WebSocket\n\n    client.on('connect', () => {\n      console.log('Conectado ao broker MQTT');\n      // Inscrever-se nos tópicos\n      client.subscribe(['sensor/temperatura', 'sensor/umidade'], err => {\n        if (err) {\n          console.error('Erro ao se inscrever nos tópicos:', err);\n        }\n      });\n    });\n    client.on('message', (topic, message) => {\n      const value = message.toString();\n      const timestamp = new Date().toLocaleString();\n\n      // Atualiza o estado com os dados recebidos do MQTT\n      setSensorData(prevData => {\n        const latestEntry = prevData[prevData.length - 1] || {\n          temperature: null,\n          humidity: null,\n          timestamp\n        };\n\n        // Atualiza os dados dependendo do tópico\n        if (topic === 'sensor/temperatura') {\n          return [...prevData, {\n            ...latestEntry,\n            temperature: value,\n            timestamp\n          }];\n        }\n        if (topic === 'sensor/umidade') {\n          return [...prevData, {\n            ...latestEntry,\n            humidity: value,\n            timestamp\n          }];\n        }\n        return prevData;\n      });\n    });\n\n    // Buscar dados de sensor ao montar o componente\n    fetchSensorData();\n    return () => {\n      client.end(); // Desconectar do broker ao desmontar o componente\n    };\n  }, []); // O array vazio garante que o efeito só é executado uma vez\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Leituras Recentes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Temperatura (\\xB0C)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Umidade (%)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: sensorData.slice(-10).map((data, index) =>\n        /*#__PURE__*/\n        // Exibir apenas as 10 leituras mais recentes\n        _jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.temperature || '--'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.humidity || '--'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(SensorData, \"1nhtCuo77g5P4S+mPowAJ6vh298=\");\n_c = SensorData;\nexport default SensorData;\nvar _c;\n$RefreshReg$(_c, \"SensorData\");","map":{"version":3,"names":["React","useState","useEffect","mqtt","jsxDEV","_jsxDEV","SensorData","_s","sensorData","setSensorData","fetchSensorData","response","fetch","data","json","error","console","client","connect","on","log","subscribe","err","topic","message","value","toString","timestamp","Date","toLocaleString","prevData","latestEntry","length","temperature","humidity","end","children","fileName","_jsxFileName","lineNumber","columnNumber","slice","map","index","_c","$RefreshReg$"],"sources":["C:/Users/marce/OneDrive/Documentos/Objetos Inteligentes/projetoiot/frontend/src/components/SensorData.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport mqtt from 'mqtt';\n\nfunction SensorData() {\n  const [sensorData, setSensorData] = useState([]); // Array para armazenar as leituras\n\n  // Função para buscar dados do backend\n  const fetchSensorData = async () => {\n    try {\n      const response = await fetch('/api/sensordata');\n      const data = await response.json();\n      setSensorData(data);\n    } catch (error) {\n      console.error('Erro ao buscar dados do sensor:', error);\n    }\n  };\n\n  useEffect(() => {\n    // Conectar ao broker MQTT\n    const client = mqtt.connect('ws://192.168.0.100:9001'); // Usando WebSocket\n\n    client.on('connect', () => {\n      console.log('Conectado ao broker MQTT');\n      // Inscrever-se nos tópicos\n      client.subscribe(['sensor/temperatura', 'sensor/umidade'], (err) => {\n        if (err) {\n          console.error('Erro ao se inscrever nos tópicos:', err);\n        }\n      });\n    });\n\n    client.on('message', (topic, message) => {\n      const value = message.toString();\n      const timestamp = new Date().toLocaleString();\n\n      // Atualiza o estado com os dados recebidos do MQTT\n      setSensorData((prevData) => {\n        const latestEntry = prevData[prevData.length - 1] || { temperature: null, humidity: null, timestamp };\n\n        // Atualiza os dados dependendo do tópico\n        if (topic === 'sensor/temperatura') {\n          return [...prevData, { ...latestEntry, temperature: value, timestamp }];\n        }\n        if (topic === 'sensor/umidade') {\n          return [...prevData, { ...latestEntry, humidity: value, timestamp }];\n        }\n        return prevData;\n      });\n    });\n\n    // Buscar dados de sensor ao montar o componente\n    fetchSensorData();\n\n    return () => {\n      client.end(); // Desconectar do broker ao desmontar o componente\n    };\n  }, []); // O array vazio garante que o efeito só é executado uma vez\n\n  return (\n    <div>\n      <h2>Leituras Recentes</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Data</th>\n            <th>Temperatura (°C)</th>\n            <th>Umidade (%)</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sensorData.slice(-10).map((data, index) => ( // Exibir apenas as 10 leituras mais recentes\n            <tr key={index}>\n              <td>{data.timestamp}</td>\n              <td>{data.temperature || '--'}</td>\n              <td>{data.humidity || '--'}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default SensorData;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}