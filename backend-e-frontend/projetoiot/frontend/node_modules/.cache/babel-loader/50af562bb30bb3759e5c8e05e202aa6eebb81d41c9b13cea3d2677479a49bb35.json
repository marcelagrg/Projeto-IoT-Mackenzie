{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport mqtt from 'mqtt';\nconst App = () => {\n  _s();\n  const [sensorData, setSensorData] = useState([]); // Estado para armazenar os dados dos sensores\n\n  useEffect(() => {\n    // Configuração do cliente MQTT\n    const client = mqtt.connect('ws://192.168.0.100:9001'); // A URL do broker\n\n    client.on('connect', () => {\n      console.log('Conectado ao MQTT Broker');\n      // Inscreve-se no tópico após a conexão ser estabelecida\n      client.subscribe('esp32/sensordata', err => {\n        if (err) {\n          console.error('Erro ao se inscrever no tópico:', err);\n        } else {\n          console.log('Inscrito no tópico \"esp32/sensordata\"');\n        }\n      });\n    });\n    client.on('message', (topic, message) => {\n      const data = JSON.parse(message.toString());\n      console.log(data);\n      console.log('Dados recebidos:', data);\n      setSensorData(prevData => [...prevData, data]); // Atualiza o estado com os novos dados\n    });\n    client.on('close', () => {\n      console.log('Desconectado do broker MQTT');\n    });\n    client.on('error', err => {\n      console.error('Erro no cliente MQTT:', err);\n    });\n\n    // Limpar a conexão quando o componente for desmontado\n    return () => {\n      if (client && client.connected) {\n        client.end();\n      }\n    };\n  }, []); // O array vazio significa que o efeito será executado apenas uma vez, quando o componente for montado\n};\n_s(App, \"1nhtCuo77g5P4S+mPowAJ6vh298=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","mqtt","App","_s","sensorData","setSensorData","client","connect","on","console","log","subscribe","err","error","topic","message","data","JSON","parse","toString","prevData","connected","end","_c","$RefreshReg$"],"sources":["C:/Users/marce/OneDrive/Documentos/Objetos Inteligentes/projetoiot/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport mqtt from 'mqtt';\n\nconst App = () => {\n  const [sensorData, setSensorData] = useState([]); // Estado para armazenar os dados dos sensores\n\n  useEffect(() => {\n    // Configuração do cliente MQTT\n    const client = mqtt.connect('ws://192.168.0.100:9001');  // A URL do broker\n    \n    client.on('connect', () => {\n      console.log('Conectado ao MQTT Broker');\n      // Inscreve-se no tópico após a conexão ser estabelecida\n      client.subscribe('esp32/sensordata', (err) => {\n        if (err) {\n          console.error('Erro ao se inscrever no tópico:', err);\n        } else {\n          console.log('Inscrito no tópico \"esp32/sensordata\"');\n        }\n      });\n    });\n\n    client.on('message', (topic, message) => {\n      const data = JSON.parse(message.toString());\n      console.log(data); \n      console.log('Dados recebidos:', data);\n      setSensorData((prevData) => [...prevData, data]);  // Atualiza o estado com os novos dados\n    });\n\n    client.on('close', () => {\n      console.log('Desconectado do broker MQTT');\n    });\n\n    client.on('error', (err) => {\n      console.error('Erro no cliente MQTT:', err);\n    });\n\n    // Limpar a conexão quando o componente for desmontado\n    return () => {\n      if (client && client.connected) {\n        client.end();\n      }\n    };\n  }, []); // O array vazio significa que o efeito será executado apenas uma vez, quando o componente for montado\n\n};\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,MAAM;AAEvB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,MAAM,GAAGL,IAAI,CAACM,OAAO,CAAC,yBAAyB,CAAC,CAAC,CAAE;;IAEzDD,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC;MACAJ,MAAM,CAACK,SAAS,CAAC,kBAAkB,EAAGC,GAAG,IAAK;QAC5C,IAAIA,GAAG,EAAE;UACPH,OAAO,CAACI,KAAK,CAAC,iCAAiC,EAAED,GAAG,CAAC;QACvD,CAAC,MAAM;UACLH,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;QACtD;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFJ,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,CAACM,KAAK,EAAEC,OAAO,KAAK;MACvC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,QAAQ,CAAC,CAAC,CAAC;MAC3CV,OAAO,CAACC,GAAG,CAACM,IAAI,CAAC;MACjBP,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEM,IAAI,CAAC;MACrCX,aAAa,CAAEe,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAEJ,IAAI,CAAC,CAAC,CAAC,CAAE;IACrD,CAAC,CAAC;IAEFV,MAAM,CAACE,EAAE,CAAC,OAAO,EAAE,MAAM;MACvBC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC5C,CAAC,CAAC;IAEFJ,MAAM,CAACE,EAAE,CAAC,OAAO,EAAGI,GAAG,IAAK;MAC1BH,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAED,GAAG,CAAC;IAC7C,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACX,IAAIN,MAAM,IAAIA,MAAM,CAACe,SAAS,EAAE;QAC9Bf,MAAM,CAACgB,GAAG,CAAC,CAAC;MACd;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAEV,CAAC;AAACnB,EAAA,CA1CID,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AA4CT,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}