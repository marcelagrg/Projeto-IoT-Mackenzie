{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marce\\\\OneDrive\\\\Documentos\\\\Objetos Inteligentes\\\\projetoiot\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport mqtt from 'mqtt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  useEffect(() => {\n    // Configuração do cliente MQTT\n    const client = mqtt.connect('ws://192.168.0.100:9001'); // A URL do broker\n    fetch(\"http://localhost:3001/api/sensordata\");\n    client.on('connect', () => {\n      console.log('Conectado ao MQTT Broker');\n\n      // Inscreva-se no tópico após a conexão ser estabelecida\n      client.subscribe('esp32/sensordata', err => {\n        if (err) {\n          console.error('Erro ao se inscrever no tópico:', err);\n        } else {\n          console.log('Inscrito no tópico \"esp32/sensordata\"');\n        }\n      });\n    });\n    client.on('message', (topic, message) => {\n      const data = JSON.parse(message.toString());\n      console.log('Dados recebidos:', data);\n    });\n    client.on('close', () => {\n      console.log('Desconectado do broker MQTT');\n    });\n    client.on('error', err => {\n      console.error('Erro no cliente MQTT:', err);\n    });\n\n    // Limpar a conexão quando o componente for desmontado\n    return () => {\n      if (client && client.connected) {\n        client.end();\n      }\n    };\n  }, []); // O array vazio significa que o efeito será executado apenas uma vez, quando o componente for montado\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Aplica\\xE7\\xE3o IoT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Monitorando dados do sensor MQTT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","mqtt","jsxDEV","_jsxDEV","App","_s","client","connect","fetch","on","console","log","subscribe","err","error","topic","message","data","JSON","parse","toString","connected","end","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/marce/OneDrive/Documentos/Objetos Inteligentes/projetoiot/frontend/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport mqtt from 'mqtt';\n\nconst App = () => {\n  useEffect(() => {\n    // Configuração do cliente MQTT\n    const client = mqtt.connect('ws://192.168.0.100:9001');  // A URL do broker\n    fetch(\"http://localhost:3001/api/sensordata\")\n\n    client.on('connect', () => {\n      console.log('Conectado ao MQTT Broker');\n\n      // Inscreva-se no tópico após a conexão ser estabelecida\n      client.subscribe('esp32/sensordata', (err) => {\n        if (err) {\n          console.error('Erro ao se inscrever no tópico:', err);\n        } else {\n          console.log('Inscrito no tópico \"esp32/sensordata\"');\n        }\n      });\n    });\n\n    client.on('message', (topic, message) => {\n      const data = JSON.parse(message.toString());\n      console.log('Dados recebidos:', data);\n    });\n\n    client.on('close', () => {\n      console.log('Desconectado do broker MQTT');\n    });\n\n    client.on('error', (err) => {\n      console.error('Erro no cliente MQTT:', err);\n    });\n\n    // Limpar a conexão quando o componente for desmontado\n    return () => {\n      if (client && client.connected) {\n        client.end();\n      }\n    };\n  }, []); // O array vazio significa que o efeito será executado apenas uma vez, quando o componente for montado\n\n  return (\n    <div>\n      <h1>Aplicação IoT</h1>\n      <p>Monitorando dados do sensor MQTT</p>\n    </div>\n  );\n};\n\nexport default App;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChBL,SAAS,CAAC,MAAM;IACd;IACA,MAAMM,MAAM,GAAGL,IAAI,CAACM,OAAO,CAAC,yBAAyB,CAAC,CAAC,CAAE;IACzDC,KAAK,CAAC,sCAAsC,CAAC;IAE7CF,MAAM,CAACG,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;MAEvC;MACAL,MAAM,CAACM,SAAS,CAAC,kBAAkB,EAAGC,GAAG,IAAK;QAC5C,IAAIA,GAAG,EAAE;UACPH,OAAO,CAACI,KAAK,CAAC,iCAAiC,EAAED,GAAG,CAAC;QACvD,CAAC,MAAM;UACLH,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;QACtD;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFL,MAAM,CAACG,EAAE,CAAC,SAAS,EAAE,CAACM,KAAK,EAAEC,OAAO,KAAK;MACvC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,QAAQ,CAAC,CAAC,CAAC;MAC3CV,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEM,IAAI,CAAC;IACvC,CAAC,CAAC;IAEFX,MAAM,CAACG,EAAE,CAAC,OAAO,EAAE,MAAM;MACvBC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC5C,CAAC,CAAC;IAEFL,MAAM,CAACG,EAAE,CAAC,OAAO,EAAGI,GAAG,IAAK;MAC1BH,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAED,GAAG,CAAC;IAC7C,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACX,IAAIP,MAAM,IAAIA,MAAM,CAACe,SAAS,EAAE;QAC9Bf,MAAM,CAACgB,GAAG,CAAC,CAAC;MACd;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEnB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBxB,OAAA;MAAAoB,QAAA,EAAG;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEV,CAAC;AAACtB,EAAA,CA9CID,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAgDT,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}